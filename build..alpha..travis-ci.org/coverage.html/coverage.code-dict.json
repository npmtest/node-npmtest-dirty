{"/home/travis/build/npmtest/node-npmtest-dirty/test.js":"/* istanbul instrument in package npmtest_dirty */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-dirty/lib.npmtest_dirty.js":"/* istanbul instrument in package npmtest_dirty */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_dirty = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_dirty = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-dirty/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-dirty && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_dirty */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_dirty\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_dirty.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_dirty.rollup.js'] =\n            local.assetsDict['/assets.npmtest_dirty.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_dirty.__dirname + '/lib.npmtest_dirty.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-dirty/node_modules/dirty/lib/dirty/index.js":"module.exports = require('./dirty');","/home/travis/build/npmtest/node-npmtest-dirty/node_modules/dirty/lib/dirty/dirty.js":"if (global.GENTLY) require = GENTLY.hijack(require);\n\nvar fs = require('fs'),\n    util = require('util'),\n    EventEmitter = require('events').EventEmitter;\n\n\n/**\n* Constructor function\n*/\nvar Dirty = exports.Dirty = function(path) {\n  if (!(this instanceof Dirty)) return new Dirty(path);\n\n  EventEmitter.call(this);\n\n  this.path = path;\n  this.writeBundle = 1000;\n\n  this._docs = {};\n  this._keys = [];\n  this._queue = [];\n  this._readStream = null;\n  this._writeStream = null;\n  this._fdRead = null;\n  this._fdWrite = null;\n\n  this._load();\n  return this;\n};\n\nutil.inherits(Dirty, EventEmitter);\nDirty.Dirty = Dirty;\nmodule.exports = Dirty;\n\n\n/**\n* set() stores a JSON object in the database at key\n* cb is fired when the data is persisted.\n* In memory, this is immediate - on disk, it will take some time.\n*/\nDirty.prototype.set = function(key, val, cb) {\n  if (val === undefined) {\n    this._keys.splice(this._keys.indexOf(key), 1);\n    delete this._docs[key];\n  } else {\n    if (this._keys.indexOf(key) === -1) {\n      this._keys.push(key);\n    }\n    this._docs[key] = val;\n  }\n\n  if (!cb) {\n    this._queue.push(key);\n  } else {\n    this._queue.push([key, cb]);\n  }\n\n  this._maybeFlush();\n};\n\n/**\n* Get the value stored at a key in the database\n* This is synchronous since a cache is maintained in-memory\n*/\nDirty.prototype.get = function(key) {\n  return this._docs[key];\n};\n\n/**\n* Get total number of stored keys\n*/\nDirty.prototype.size = function() {\n  return this._keys.length;\n};\n\n/**\n* Remove a key and the value stored there\n*/\nDirty.prototype.rm = function(key, cb) {\n  this.set(key, undefined, cb);\n};\n\n\n/**\n* Iterate over keys, applying match function\n*/\nDirty.prototype.forEach = function(fn) {\n\n  for (var i = 0; i < this._keys.length; i++) {\n    var key = this._keys[i];\n    if (fn(key, this._docs[key]) === false) {\n      break;\n    }\n  }\n\n};\n\n/**\n* Update the value stored at a key in the database.\n* This is synchronous since a cache is maintained in-memory\n* cb is passed as per Dirty.prototype.set\n*/\nDirty.prototype.update = function(key, updater, cb) {\n  this.set(key, updater(this.get(key)), cb);\n};\n\n/**\n * Close dirty db file stream, release file handle\n */\nDirty.prototype.close = function() {\n\n  if (!this.path) {\n    return;\n  }\n \n  this._maybeFlush();\n\n  var self = this;\n  if (this._fdRead) {\n    fs.close(this._fdRead, function() {\n      self.emit('read_close');\n    });\n  }\n  if (this._fdWrite) {\n    fs.close(this._fdWrite, function() {\n      self.emit('write_close');\n    });\n  }\n};\n\n// Called when a dirty connection is instantiated\nDirty.prototype._load = function() {\n  var self = this, buffer = '', length = 0;\n\n  if (!this.path) {\n    process.nextTick(function() {\n      self.emit('load', 0);\n    });\n    return;\n  }\n\n  this._readStream = fs.createReadStream(this.path, {\n    encoding: 'utf-8',\n    flags: 'r'\n  });\n\n  this._readStream\n    .on('error', function(err) {\n      if (err.code === 'ENOENT') {\n        self.emit('load', 0);\n        return;\n      }\n\n      self.emit('error', err);\n    })\n    .on('data', function(chunk) {\n      buffer += chunk;\n      if (chunk.lastIndexOf('\\n') == -1) return;\n      var arr = buffer.split('\\n');\n      buffer = arr.pop();\n      arr.forEach(function(rowStr) {\n        if (!rowStr) {\n          self.emit('error', new Error('Empty lines never appear in a healthy database'));\n          return;\n        }\n\n        var row;\n        try {\n          row = JSON.parse(rowStr);\n          if (!('key' in row)) {\n            throw new Error();\n          }\n        } catch (e) {\n          self.emit('error', new Error('Could not load corrupted row: '+rowStr));\n          return '';\n        }\n\n        if (row.val === undefined) {\n          if (row.key in self._docs) {\n            length--;\n          }\n          delete self._docs[row.key];\n        } else {\n          if (!(row.key in self._docs)) {\n            if(self._keys.indexOf(row.key) === -1){\n            \tself._keys.push(row.key);\n            }\n            length++;\n          }\n          self._docs[row.key] = row.val;\n        }\n        return '';\n      });\n    })\n    .on('end', function() {\n      if (buffer.length) {\n        self.emit('error', new Error('Corrupted row at the end of the db: '+buffer));\n      }\n      self.emit('load', length);\n    })\n    .on('open', function(fd) {\n    \tself._fdRead = fd;\n    });\n\n  this._writeStream = fs.createWriteStream(this.path, {\n    encoding: 'utf-8',\n    flags: 'a'\n  });\n\n  this._writeStream.on('drain', function() {\n    self._writeDrain();\n  });\n  \n  this._writeStream.on('open', function(fd) {\n\t  self._fdWrite = fd;\n  });\n};\n\nDirty.prototype._writeDrain = function() {\n  this.flushing = false;\n\n  if (!this._queue.length) {\n    this.emit('drain');\n  } else {\n    this._maybeFlush();\n  }\n};\n\nDirty.prototype._maybeFlush = function() {\n  if (this.flushing || !this._queue.length) {\n    return;\n  }\n\n  this._flush();\n};\n\nDirty.prototype._flush = function() {\n  var self = this,\n      length = this._queue.length,\n      bundleLength = 0,\n      bundleStr = '',\n      key,\n      cbs = [];\n\n  this.flushing = true;\n\n  function callbacks(err, cbs) {\n    while (cbs.length) {\n      cbs.shift()(err);\n    }\n  }\n\n  for (var i = 0; i < length; i++) {\n    key = this._queue[i];\n    if (Array.isArray(key)) {\n      cbs.push(key[1]);\n      key = key[0];\n    }\n\n    bundleStr += JSON.stringify({key: key, val: this._docs[key]})+'\\n';\n    bundleLength++;\n\n    if (bundleLength < this.writeBundle && i < length - 1) {\n      continue;\n    }\n\n    (function(cbs) {\n      var isDrained;\n\n      if (!self.path) {\n        process.nextTick(function() {\n          callbacks(null, cbs);\n          self._writeDrain();\n        });\n        return;\n      }\n\n      isDrained = self._writeStream.write(bundleStr, function(err) {\n        if (isDrained) {\n          self._writeDrain();\n        }\n\n        if (!cbs.length && err) {\n          self.emit('error', err);\n          return;\n        }\n\n        callbacks(err, cbs);\n      });\n\n    })(cbs);\n\n    bundleStr = '';\n    bundleLength = 0;\n    cbs = [];\n  }\n\n  this._queue = [];\n};\n","/home/travis/build/npmtest/node-npmtest-dirty/node_modules/dirty/index.js":"module.exports = require('./lib/dirty');\n","/home/travis/build/npmtest/node-npmtest-dirty/node_modules/dirty/benchmark/dirty/for-each.js":"var config = require('../../test/config');\nvar COUNT = 1e6,\n    dirty = require(config.LIB_DIRTY)(),\n    util = require('util');\n\nfor (var i = 0; i < COUNT; i++) {\n  dirty.set(i, i);\n}\n\nvar start = Date.now(), i = 0;\ndirty.forEach(function(key, doc) {\n  if (!key && key !== 0) {\n    throw new Error('implementation fail');\n  }\n});\n\nvar ms = Date.now() - start,\n    mhz = ((COUNT / (ms / 1000)) / 1e6).toFixed(2),\n    million = COUNT / 1e6;\n\n// Can't use console.log() since since I also test this in ancient node versions\nutil.log(mhz+' Mhz ('+million+' million in '+ms+' ms)');\n","/home/travis/build/npmtest/node-npmtest-dirty/node_modules/dirty/test/config.js":"var path = require('path'),\n  fs = require('fs'),\n  rimraf = require('rimraf');\n\nvar TMP_PATH = path.join(__dirname, 'tmp'),\n  LIB_DIRTY = path.join(__dirname, '../lib/dirty');\n\nrimraf.sync(TMP_PATH);\nfs.mkdirSync(TMP_PATH);\n\nmodule.exports = {\n  TMP_PATH: TMP_PATH,\n  LIB_DIRTY: LIB_DIRTY\n};\n","/home/travis/build/npmtest/node-npmtest-dirty/node_modules/dirty/benchmark/dirty/get.js":"var config = require('../../test/config');\nvar COUNT = 1e6,\n    dirty = require(config.LIB_DIRTY)(),\n    util = require('util');\n\nfor (var i = 0; i < COUNT; i++) {\n  dirty.set(i, i);\n}\n\nvar start = Date.now();\nfor (var i = 0; i < COUNT; i++) {\n  if (dirty.get(i) !== i) {\n    throw new Error('implementation fail');\n  }\n}\n\nvar ms = Date.now() - start,\n    mhz = ((COUNT / (ms / 1000)) / 1e6).toFixed(2),\n    million = COUNT / 1e6;\n\n// Can't use console.log() since since I also test this in ancient node versions\nutil.log(mhz+' Mhz ('+million+' million in '+ms+' ms)');\n\n","/home/travis/build/npmtest/node-npmtest-dirty/node_modules/dirty/benchmark/dirty/load.js":"var config = require('../../test/config');\nvar COUNT = 1e4,\n    DB_FILE = config.TMP_PATH + '/benchmark-set-drain.dirty',\n    dirty = require(config.LIB_DIRTY)(DB_FILE),\n    util = require('util'),\n    loaded = false;\n\nfor (var i = 0; i < COUNT; i++) {\n  dirty.set(i, i);\n}\n\ndirty.on('drain', function() {\n  var start = Date.now();\n  require('dirty')(DB_FILE).on('load', function(length) {\n    var ms = Date.now() - start,\n        mhz = ((COUNT / (ms / 1000)) / 1e3).toFixed(2),\n        million = COUNT / 1e6;\n\n    // Can't use console.log() since since I also test this in ancient node versions\n    util.log(mhz+' Hz ('+million+' million in '+ms+' ms)');\n\n    loaded = true;\n\n    assert.equal(length, COUNT);\n  });\n});\n\nprocess.on('exit', function() {\n  assert.ok(loaded);\n});\n","/home/travis/build/npmtest/node-npmtest-dirty/node_modules/dirty/benchmark/dirty/set-drain.js":"var config = require('../../test/config');\nvar COUNT = 1e4,\n    dirty = require(config.LIB_DIRTY)(config.TMP_PATH + '/benchmark-set-drain.dirty'),\n    util = require('util'),\n    drained = false;\n\nvar start = Date.now();\nfor (var i = 0; i < COUNT; i++) {\n  dirty.set(i, i);\n}\n\ndirty.on('drain', function() {\n  var ms = Date.now() - start,\n      mhz = ((COUNT / (ms / 1000)) / 1e3).toFixed(2),\n      million = COUNT / 1e6;\n\n  // Can't use console.log() since since I also test this in ancient node versions\n  util.log(mhz+' Hz ('+million+' million in '+ms+' ms)');\n\n  drained = true;\n});\n\nprocess.on('exit', function() {\n  assert.ok(drained);\n});\n","/home/travis/build/npmtest/node-npmtest-dirty/node_modules/dirty/benchmark/dirty/set.js":"var config = require('../../test/config');\nvar COUNT = 1e6,\n    dirty = require(config.LIB_DIRTY)(config.TMP_PATH + '/benchmark-set.dirty'),\n    util = require('util');\n\nvar start = Date.now();\nfor (var i = 0; i < COUNT; i++) {\n  dirty.set(i, i);\n}\n\nvar ms = Date.now() - start,\n    mhz = ((COUNT / (ms / 1000)) / 1e6).toFixed(2),\n    million = COUNT / 1e6;\n\n// Can't use console.log() since since I also test this in ancient node versions\nutil.log(mhz+' Mhz ('+million+' million in '+ms+' ms)');\n","/home/travis/build/npmtest/node-npmtest-dirty/node_modules/dirty/benchmark/v8/array-filter.js":"var COUNT = 1e7,\n    util = require('util'),\n    a = [];\n\nfor (var i = 0; i < COUNT; i++) {\n  a.push(i);\n}\n\nvar start = +new Date;\na.filter(function(val, i) {\n  if (val !== i) {\n    throw new Error('implementation fail');\n  }\n});\n\nvar ms = +new Date - start,\n    mhz = ((COUNT / (ms / 1000)) / 1e6).toFixed(2),\n    million = COUNT / 1e6;\n\n// Can't use console.log() since since I also test this in ancient node versions\nutil.log(mhz+' Mhz ('+million+' million in '+ms+' ms)');\n\n","/home/travis/build/npmtest/node-npmtest-dirty/node_modules/dirty/benchmark/v8/array-get.js":"var COUNT = 1e7,\n    util = require('util'),\n    a = [];\n\nfor (var i = 0; i < COUNT; i++) {\n  a.push(i);\n}\n\nvar start = +new Date;\nfor (var i = 0; i < COUNT; i++) {\n  if (a[i] !== i) {\n    throw new Error('implementation fail');\n  }\n}\n\nvar ms = +new Date - start,\n    mhz = ((COUNT / (ms / 1000)) / 1e6).toFixed(2),\n    million = COUNT / 1e6;\n\n// Can't use console.log() since since I also test this in ancient node versions\nutil.log(mhz+' Mhz ('+million+' million in '+ms+' ms)');\n","/home/travis/build/npmtest/node-npmtest-dirty/node_modules/dirty/benchmark/v8/array-loop.js":"var COUNT = 1e7,\n    util = require('util'),\n    a = [];\n\nfor (var i = 0; i < COUNT; i++) {\n  a.push(i);\n}\n\nvar start = +new Date;\nfor (var i = 0; i < COUNT; i++) {\n  if (a[i] !== i) {\n    throw new Error('implementation fail');\n  }\n}\n\nvar ms = +new Date - start,\n    mhz = ((COUNT / (ms / 1000)) / 1e6).toFixed(2),\n    million = COUNT / 1e6;\n\n// Can't use console.log() since since I also test this in ancient node versions\nutil.log(mhz+' Mhz ('+million+' million in '+ms+' ms)');\n","/home/travis/build/npmtest/node-npmtest-dirty/node_modules/dirty/benchmark/v8/array-push.js":"var COUNT = 1e6,\n    util = require('util'),\n    a = [];\n\nvar start = +new Date;\nfor (var i = 0; i < COUNT; i++) {\n  a.push(i);\n}\n\nvar ms = +new Date - start,\n    mhz = ((COUNT / (ms / 1000)) / 1e6).toFixed(2),\n    million = COUNT / 1e6;\n\n// Can't use console.log() since since I also test this in ancient node versions\nutil.log(mhz+' Mhz ('+million+' million in '+ms+' ms)');\n","/home/travis/build/npmtest/node-npmtest-dirty/node_modules/dirty/benchmark/v8/array-set.js":"var COUNT = 1e6,\n    util = require('util'),\n    a = [];\n\nvar start = +new Date;\nfor (var i = 0; i < COUNT; i++) {\n  a[i] = i;\n}\n\nvar ms = +new Date - start,\n    mhz = ((COUNT / (ms / 1000)) / 1e6).toFixed(2),\n    million = COUNT / 1e6;\n\n// Can't use console.log() since since I also test this in ancient node versions\nutil.log(mhz+' Mhz ('+million+' million in '+ms+' ms)');\n","/home/travis/build/npmtest/node-npmtest-dirty/node_modules/dirty/benchmark/v8/object-get.js":"var COUNT = 1e7,\n    util = require('util'),\n    o = {};\n\nfor (var i = 0; i < COUNT; i++) {\n  o[i] = i;\n}\n\nvar start = +new Date;\nfor (var i = 0; i < COUNT; i++) {\n  if (o[i] !== i) {\n    throw new Error('implementation fail');\n  }\n}\n\nvar ms = +new Date - start,\n    mhz = ((COUNT / (ms / 1000)) / 1e6).toFixed(2),\n    million = COUNT / 1e6;\n\n// Can't use console.log() since since I also test this in ancient node versions\nutil.log(mhz+' Mhz ('+million+' million in '+ms+' ms)');\n","/home/travis/build/npmtest/node-npmtest-dirty/node_modules/dirty/benchmark/v8/object-loop.js":"var COUNT = 1e6,\n    util = require('util'),\n    o = {};\n\nfor (var i = 0; i < COUNT; i++) {\n  o[i] = i;\n}\n\nvar start = +new Date;\nfor (var i in o) {\n  if (o[i] != i) {\n    throw new Error('implementation fail');\n  }\n}\n\nvar ms = +new Date - start,\n    mhz = ((COUNT / (ms / 1000)) / 1e6).toFixed(2),\n    million = COUNT / 1e6;\n\n// Can't use console.log() since since I also test this in ancient node versions\nutil.log(mhz+' Mhz ('+million+' million in '+ms+' ms)');\n","/home/travis/build/npmtest/node-npmtest-dirty/node_modules/dirty/benchmark/v8/object-loop-with-object-keys.js":"var COUNT = 1e6,\n    util = require('util'),\n    o = {};\n\nfor (var i = 0; i < COUNT; i++) {\n  o[i] = i;\n}\n\nvar start = +new Date, keys = Object.keys(o), length = keys.length;\nfor (var i = 0; i < keys.length; i++) {\n  if (o[keys[i]] != i) {\n    throw new Error('implementation fail');\n  }\n}\n\nvar ms = +new Date - start,\n    mhz = ((COUNT / (ms / 1000)) / 1e6).toFixed(2),\n    million = COUNT / 1e6;\n\n// Can't use console.log() since since I also test this in ancient node versions\nutil.log(mhz+' Mhz ('+million+' million in '+ms+' ms)');\n","/home/travis/build/npmtest/node-npmtest-dirty/node_modules/dirty/benchmark/v8/object-set.js":"var COUNT = 1e6,\n    util = require('util'),\n    o = {};\n\nvar start = +new Date;\nfor (var i = 0; i < COUNT; i++) {\n  o[i] = i;\n}\n\nvar ms = +new Date - start,\n    mhz = ((COUNT / (ms / 1000)) / 1e6).toFixed(2),\n    million = COUNT / 1e6;\n\n// Can't use console.log() since since I also test this in ancient node versions\nutil.log(mhz+' Mhz ('+million+' million in '+ms+' ms)');\n"}